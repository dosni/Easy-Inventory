@page "/storeUpdate/{Id:int}/{loc}"
@using ServiceLayer.Model;
@using ServiceLayer.StoreServices;
@using ServiceLayer.StoreServices.Concrete;

<PageTitle>StoreUpdate</PageTitle>

@inject StoreServices _storeServices
@inject IDialogService _dialogService

@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}

<FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="GoBack" />

<div style="padding: 1.5rem;">
    <FluentLabel Typo="Typography.Header"> Update Lokasi </FluentLabel>
    <br />
    <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />
        <FluentValidationSummary />
        <FluentStack Orientation="Orientation.Vertical">
            <FluentGrid Spacing="0">
                <FluentGridItem xs="6">
                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value="model.StoreId" Readonly=true Placeholder="Id Lokasi">Id Lokasi</FluentNumberField>
                        </FluentGridItem>

                    </FluentGrid>
                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentTextField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value="model.StoreName" Placeholder="Nama Lokasi">Nama Lokasi</FluentTextField>
                        </FluentGridItem>
                    </FluentGrid>
                </FluentGridItem>
            </FluentGrid>
        </FluentStack>
        <br />
        <FluentGrid Spacing="3" Justify="@Justification">
            <FluentGridItem xs="12" sm="6">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
            </FluentGridItem>

        </FluentGrid>
    </EditForm>

</div>
@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string loc { get; set; }

    JustifyContent Justification = JustifyContent.FlexStart;
    private bool IsLoading { get; set; } = false;
    public StoreDto model { get; set; }

    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();

        init();

    }
    private async Task GoBack()
    {
        await jsruntime.InvokeVoidAsync("history.back");
    }
    private async void init()
    {
        model = new StoreDto();
        model.StoreId = Id;
        model.StoreName = loc;
    }
    private async void OnValidSubmit()
    {
        if (model.StoreName == string.Empty)
        {
            return;
        }
        try
        {
            IsLoading = true;
            await Task.Delay(200);


            StoreDto a = new StoreDto()
                {
                    StoreId = model.StoreId,
                    StoreName = model.StoreName

                };

            ServiceResponseDTO<bool> result = new();

            result = await _storeServices.UpdateAsync(a);

            IsLoading = false;
            // berikan pesan

            if (result.Success == true)
            {
                _dialogService.ShowInfo(result.Message, "Update");
            }
            else
            {
                _dialogService.ShowWarning(result.Message, "Update");
            }

            result = new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }
    }
}

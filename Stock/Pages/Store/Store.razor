@page "/store"

@using ServiceLayer.Model;
@using ServiceLayer.StoreServices;
@using ServiceLayer.StoreServices.Concrete;

<PageTitle>StoreList</PageTitle>

@inject StoreServices _storeServices

<FluentHeader Style="background-color:none">
    <h3>Locations</h3>
    <FluentSpacer />
    <FluentButton OnClick="@(() => GetLink())" Appearance="Appearance.Accent">New</FluentButton>
</FluentHeader>

@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
@if (stores != null)
{
    <FluentDataGrid Items="@stores" ResizableColumns=true GridTemplateColumns="0.4fr 0.6fr 0.3fr 0.3fr"
                    style="height: 580px;overflow:auto;">

        <PropertyColumn Property="@(c => c.StoreId)" Title="Store Id" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.StoreName)" Title="Lokasi" Align="Align.Start" Sortable="true" />
        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Edit())" BackgroundColor="var(--highlight-bg)" Color="var(--error)" Appearance="Appearance.Filled" Title="Edit" OnClick="@(() => Edit(context.StoreId,context.StoreName))" />
            <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" Appearance="Appearance.Filled" BackgroundColor="#ff531a" Color="var(--danger)" Title="Hapus" OnClick="@(() => Delete(context.StoreId,context.StoreName))" />
        </TemplateColumn>
    
    </FluentDataGrid>
}

@code {
    private bool IsLoading { get; set; } = false;
    public IQueryable<StoreDto>? stores;
    bool? canceled;
    JustifyContent Justification = JustifyContent.FlexStart;

    private void GetLink()
    {
        _navman.NavigateTo("/storeCreate");
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Loading();
    }
    private async Task Loading()
    {
        IsLoading = true;
        await Task.Delay(200);
        stores = (await _storeServices.GetStoreListAsycn()).AsQueryable();
        IsLoading = false;
    }
    private async void Edit(int Id, string loc)
    {
        _navman.NavigateTo($"storeUpdate/{Id}/{loc}");
    }

    private async void Delete(int Id, string cat)
    {
        try
        {

            var dialog = await _dialogService.ShowConfirmationAsync("Are you sure you want to Delete?", "Ok", "No", "Delete Data");
            var dlgresult = await dialog.Result;

            canceled = dlgresult.Cancelled;

            if (canceled == null || (canceled == true))
            {
                _dialogService.ShowInfo("Delete cancelled", "Delete");
                return;
            }
            if (Id == 1)
            {
                _dialogService.ShowInfo("Can not delete default", "Delete");
                return;
            }

            IsLoading = true;
           
            ServiceResponseDTO<bool> result = new();
            result = await _storeServices.DeleteLocationAsync(Id);
            IsLoading = false;
            if (result.Success == true)
            {
                _dialogService.ShowInfo(result.Message, "Delete");
            }
            else
            {
                _dialogService.ShowWarning(result.Message, "Delete");
            }
            result = new();
            await Loading();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }

    }

}

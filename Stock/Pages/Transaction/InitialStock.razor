@page "/initialStock"
@using Common;
@using ServiceLayer.Model;
@using ServiceLayer.ProductService;
@using ServiceLayer.ProductService.Concrete;
@using ServiceLayer.ProductTransactionServices;
@using ServiceLayer.ProductTransactionServices.Concrete;
@using ServiceLayer.StoreServices.Concrete;
@using ServiceLayer.StoreServices;
@using ServiceLayer.TransactionServices.Concrete;
@using ServiceLayer.TransactionServices;

<PageTitle>InitStock</PageTitle>


@inject TransactionServices _initStockServices
@* @inject TransactionLineServices _productDisplay
 *@
@inject ProductServices _productDisplay


@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}

@if (productDisplays != null)
{
    
    <div style="padding: 1.5rem;">
    <FluentLabel Typo="Typography.Header"> Initial Stock </FluentLabel>
    <br />

    <EditForm Model="@model">
        <DataAnnotationsValidator />
        <FluentValidationSummary />
        <FluentStack Orientation="Orientation.Vertical">
            <FluentGrid Spacing="0">
                <FluentGridItem xs="12">
                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentDatePicker @bind-Value="@model.TransactionDate" Label="Trasaction Date " />
                        </FluentGridItem>
                    </FluentGrid>
                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentTextArea @bind-Value="model.Description" Rows="3" Cols="80">Keterangan</FluentTextArea>
                        </FluentGridItem>
                    </FluentGrid>
                </FluentGridItem>
            </FluentGrid>
        </FluentStack>

    </EditForm>
    <br />
    <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Color="Color.Neutral" Slot="start" Title="Add Product" OnClick="@(() => Show(true))">
        Add Product
    </FluentButton>
</div>
}




@if (showProduct == false)
{

    <FluentDataGrid Items="@productLines" ResizableColumns=true GridTemplateColumns="0.4fr 0.6fr 0.3fr 0.3fr"
                    style="height: 250px;overflow:auto;">

        <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Qty)" Title="Qty" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Price)" Title="Price" Align="Align.Start" />
        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" Appearance="Appearance.Filled" BackgroundColor="#ff531a" Color="var(--danger)" Title="Delete" OnClick="@(() => Delete(context.SkuId))" />
        </TemplateColumn>

    </FluentDataGrid>
    <br />

}
else
{
    <FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="@(() => Show(false))" />


        <FluentDataGrid Items="@productDisplays" ResizableColumns=true GridTemplateColumns="0.4fr 0.4fr 0.2fr 0.2fr 0.3fr"
                        style="height: 250px;overflow:auto;">

            <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" Sortable="true" />
            <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" Sortable="true" />
            <TemplateColumn Title="Qty">
                <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Qty Placeholder="Qty" Min="1"></FluentNumberField>
            </TemplateColumn>
            <TemplateColumn Title="Price">
                <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Price Placeholder="Price" Min="0"></FluentNumberField>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" BackgroundColor="var(--highlight-bg)" Color="var(--error)" Appearance="Appearance.Filled" Title="Add" OnClick="@(() => Add(context.SkuId))" />
            </TemplateColumn>

        </FluentDataGrid>
        <br />
   



}
<FluentGrid Spacing="3" Justify="@Justification">
    <FluentGridItem xs="12" sm="6">
        <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="Save">Save</FluentButton>
    </FluentGridItem>

</FluentGrid>
@code {
    private bool IsLoading { get; set; } = false;
    private bool showProduct = false;
    public TransactionDto model { get; set; }
    
    public string Type = ((int)TransactionType.InitialStock).ToString();

    IQueryable<ProductDisplayDto>? productDisplays;


    List<TransactionLineDto> productSelected = new List<TransactionLineDto>();

    IQueryable<TransactionLineDto>? productLines;


    JustifyContent Justification = JustifyContent.FlexStart;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();
            IsLoading = true;
            productDisplays = (await _productDisplay.GetProductSelectionAsycn()).AsQueryable();
            init();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }

    private async void Show(bool flg)
    {
        showProduct = flg;
    }
    private async void Delete(int Id)
    {
        try
        {
            var selectedProduct = productSelected.FirstOrDefault(p => p.SkuId == Id);
            if (selectedProduct != null)
            {
                productSelected.Remove(selectedProduct);
            }
            productLines = productSelected.AsQueryable();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }
    }
    private async void Add(int Id)
    {

        // Find the product with the specified Id in the productDisplays collection
        var selectedProduct = productDisplays.FirstOrDefault(p => p.SkuId == Id);



        if (selectedProduct != null)
        {
            if (productLines != null)
            {
                foreach (var dat in productLines)
                {
                    // Cek apakah data sudah dipilih
                    if (dat.SkuId == selectedProduct.SkuId)
                    {
                        return;
                    }
                }

            }
            // storeId = 1 default.  Seharusnya pada saat login dicari userId itu StoreId nya yang mana ?

            var a = new TransactionLineDto()

                {
                    ProductName = selectedProduct.ProductName,
                    SKU = selectedProduct.SKU,
                    SkuId = selectedProduct.SkuId,
                    StoreId = 1,
                    TransactionType = ((int)Common.TransactionType.InitialStock).ToString(),
                    Qty = selectedProduct.Qty,
                    Price = selectedProduct.Price

                };
            productSelected.Add(a);


        }

        productLines = productSelected.AsQueryable();


        StateHasChanged();


    }



    private async void init()
    {
        model = new TransactionDto();

        model.TransactionType = Type;
        model.TransactionDate = DateTime.Today;
        model.Description = "Initial stock";
        model.CreatedBy = "Admin";
        model.CreatedAt = DateTime.Today;

    }

    private async void Save()
    {


        try
        {
            if (productSelected.Count == 0)
            {
                _dialogService.ShowInfo("Add product", "Select Products");
                return;
            }
            IsLoading = true;
            TransactionDto a = new TransactionDto()
                {
                    TransactionDate = model.TransactionDate,
                    TransactionType = model.TransactionType,
                    CreatedAt = model.CreatedAt,
                    CreatedBy = model.CreatedBy,
                    IsPosted = true,
                    Description = model.Description
                };

            ServiceResponseDTO<bool> result = new();
            result = await _initStockServices.CreateAsync(a, productLines);

            IsLoading = false;
            // berikan pesan

            if (result.Success == true)
            {
                _dialogService.ShowInfo(result.Message, "Save");
            }
            else
            {
                _dialogService.ShowWarning(result.Message, "Save");
            }

            result = new();
            init();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }
    }

}

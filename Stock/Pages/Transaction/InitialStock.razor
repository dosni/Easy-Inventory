@page "/initialStock"
@using ServiceLayer.Model;
@using ServiceLayer.ProductService;
@using ServiceLayer.ProductService.Concrete;
@using ServiceLayer.ProductTransactionServices;
@using ServiceLayer.ProductTransactionServices.Concrete;
@using ServiceLayer.StoreServices.Concrete;
@using ServiceLayer.StoreServices;
@using ServiceLayer.TransactionServices.Concrete;
@using ServiceLayer.TransactionServices;

<PageTitle>InitStock</PageTitle>


@inject StoreServices _storeServices

@inject ReceiveStockServices _initStockServices
@inject ProductSKUServices _productSKUServices
@inject ProductServices _productServices
@inject TransactionLineServices _productDisplay



@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}

@if (prods != null)
{
    <div style="padding: 1.5rem;">
        <FluentLabel Typo="Typography.Header"> Initial Stock </FluentLabel>
        <br />

        <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentGrid Spacing="0">
                    <FluentGridItem xs="12">


                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentDatePicker @bind-Value="@model.TransactionDate" Label="Trasaction Date " />
                            </FluentGridItem>
                        </FluentGrid>



                    </FluentGridItem>
                </FluentGrid>
            </FluentStack>

        </EditForm>
        <br />
        <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Color="Color.Neutral" Slot="start" Title="Add Product" OnClick="@(() => Show(true))">
            Add Product
        </FluentButton>
    </div>
}
@if (showProduct == false)
{

    <FluentDataGrid Items="@productLines" ResizableColumns=true GridTemplateColumns="0.4fr 0.6fr 0.3fr 0.3fr"
                    style="height: 250px;overflow:auto;">

        <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Qty)" Title="Qty" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Price)" Title="Price" Align="Align.Start" />
        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" Appearance="Appearance.Filled" BackgroundColor="#ff531a" Color="var(--danger)" Title="Delete" OnClick="@(() => Delete(context.SkuId))" />
        </TemplateColumn>

    </FluentDataGrid>
    <br />

}
else
{
    <FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="@(() => Show(false))" />


    <FluentDataGrid Items="@productDisplays" ResizableColumns=true GridTemplateColumns="0.4fr 0.4fr 0.2fr 0.2fr 0.3fr"
                    style="height: 250px;overflow:auto;">

        <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" Sortable="true" />
        <TemplateColumn Title="Qty">
            <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Qty Placeholder="Qty" Min="1"></FluentNumberField>
        </TemplateColumn>
        <TemplateColumn Title="Price">
            <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Price Placeholder="Price" Min="0"></FluentNumberField>
        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" BackgroundColor="var(--highlight-bg)" Color="var(--error)" Appearance="Appearance.Filled" Title="Add" OnClick="@(() => Add(context.SkuId,false))" />
        </TemplateColumn>

    </FluentDataGrid>
    <br />

}
<FluentGrid Spacing="3" Justify="@Justification">
    <FluentGridItem xs="12" sm="6">
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
    </FluentGridItem>

</FluentGrid>
@code {
    private bool IsLoading { get; set; } = false;
    private bool showProduct = false;



    public ProductTransactionDto model { get; set; }

    List<Option<string>> stringOptionsProd = new();
    string? stringProduct = "(Select Product)";
    Option<string> selectedProductId = default!;

    List<Option<string>> stringOptionsLoc = new();
    string? stringLocation = "(Select Location)";
    Option<string> selectedLocationId = default!;


    IQueryable<ProductSkuListDto>? prods;
    IQueryable<ProductDisplayDto>? productDisplays;
    IQueryable<StoreDto>? locs;


    List<TransactionLineDto> productSelected = new List<TransactionLineDto>();
    IQueryable<TransactionLineDto>? productLines;


    JustifyContent Justification = JustifyContent.FlexStart;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();
            await Loading();

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }

    private async void Show(bool flg)
    {
        showProduct = flg;
    }
    private async void Delete(int Id)
    {
        try
        {
            var selectedProduct = productSelected.FirstOrDefault(p => p.SkuId == Id);
            if (selectedProduct != null)
            {
                productSelected.Remove(selectedProduct);
            }
            productLines = productSelected.AsQueryable();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }
    }
    private async void Add(int Id, bool flg)
    {

        // Find the product with the specified Id in the productDisplays collection
        var selectedProduct = productDisplays.FirstOrDefault(p => p.SkuId == Id);



        if (selectedProduct != null)
        {
            if (productLines != null)
            {
                foreach (var dat in productLines)
                {
                    // Cek apakah data sudah dipilih
                    if (dat.SkuId == selectedProduct.SkuId)
                    {
                        return;
                    }
                }

            }

            var a = new TransactionLineDto()

                {
                    ProductName = selectedProduct.ProductName,
                    SKU = selectedProduct.SKU,
                    SkuId = selectedProduct.SkuId,
                    Qty = selectedProduct.Qty,
                    Price = selectedProduct.Price,
                    StoreId = 1
                };
            productSelected.Add(a);


        }

        productLines = productSelected.AsQueryable();

        showProduct = flg;

        StateHasChanged();


    }

    private async Task Loading()
    {
        try
        {
            IsLoading = true;
            productDisplays = (await _productDisplay.GetProductListAsycn()).AsQueryable();

            prods = (await _productSKUServices.GetProductSkuListAsycn()).AsQueryable();

            stringOptionsProd.Add(new Option<string>
                {
                    Value = "0",
                    Text = "(Select Product)",
                    Selected = true // You can set this based on your logic
                });
            foreach (var item in prods)
            {
                stringOptionsProd.Add(new Option<string>
                    {
                        Value = item.SkuId.ToString(), // Assuming CategoryId is an integer
                        Text = item.SKU,
                        Selected = false // You can set this based on your logic
                    });
            }

            locs = (await _storeServices.GetStoreListAsycn()).AsQueryable();

            stringOptionsLoc.Add(new Option<string>
                {
                    Value = "0",
                    Text = "(Select Location)",
                    Selected = true // You can set this based on your logic
                });
            foreach (var item in locs)
            {
                stringOptionsLoc.Add(new Option<string>
                    {
                        Value = item.StoreId.ToString(), // Assuming CategoryId is an integer
                        Text = item.StoreName,
                        Selected = false // You can set this based on your logic
                    });
            }

            init();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }

    }

    private async void init()
    {
        model = new ProductTransactionDto();

        model.TransactionType = "I";
        model.TransactionDate = DateTime.Today;
        model.Description = "Initial stock";
        model.CreatedBy = "Admin";
        model.CreatedAt = DateTime.Today;

    }

    private async void OnValidSubmit()
    {
        if (selectedProductId.Text == "(Select Product)" || selectedProductId.Text == null)
        {
            _dialogService.ShowInfo("Pilih Product", "Save");
            return;
        }
        if (selectedLocationId.Text == "(Select Location)" || selectedLocationId.Text == null)
        {
            _dialogService.ShowInfo("Pilih Location", "Save");
            return;
        }

        try
        {

            IsLoading = true;
            ProductTransactionDto a = new ProductTransactionDto()
                {
                    TransactionDate = model.TransactionDate,
                    TransactionType = model.TransactionType,
                    SkuId = Convert.ToInt32(selectedProductId?.Value),
                    StoreId = Convert.ToInt32(selectedLocationId?.Value),
                    Price = model.Price,
                    Qty = model.Qty,
                    CreatedAt = model.CreatedAt,
                    CreatedBy = model.CreatedBy,
                    Description = model.Description
                };
            ServiceResponseDTO<bool> result = new();
            result = await _initStockServices.CreateAsync(a);
            IsLoading = false;
            // berikan pesan

            if (result.Success == true)
            {
                _dialogService.ShowInfo(result.Message, "Save");
            }
            else
            {
                _dialogService.ShowWarning(result.Message, "Save");
            }

            result = new();
            init();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }
    }

}

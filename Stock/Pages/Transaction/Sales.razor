@page "/sales"



<PageTitle>Sales</PageTitle>


<FluentHeader Style="background-color:none">
    <h3>Sales</h3>
</FluentHeader>
@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
@if (productDisplays != null)
{

    <div style="padding: 1.5rem;">
        @*  <FluentLabel Typo="Typography.Header"> Sales </FluentLabel>
    <br /> *@

        <EditForm Model="@model">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentGrid Spacing="0">
                    <FluentGridItem xs="12">
                        @*   <FluentGrid>
                    <FluentGridItem xs="6">
                    <FluentCombobox Items=@stringOptionsType
                    OptionText="@(i => i.Text)"
                    OptionValue="@(i => i.Value)"
                    OptionSelected="@(i => i.Selected)"
                    @bind-SelectedOption="@selectedTypeId"
                    @bind-Value="@stringType" />
                    </FluentGridItem>
                    </FluentGrid> *@
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentDatePicker @bind-Value="@model.TransactionDate" Label="Trasaction Date " />
                            </FluentGridItem>
                        </FluentGrid>

                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <Stock.Component.Combo Items="@stringOptionsCustomer"
                                                       OnSelectedOptionChanged="HandleOptionChanged"
                                                       OnSelectedValueChanged="HandleValueChanged" />
                                @*   <FluentCombobox Items=@stringOptionsCustomer
                            OptionText="@(i => i.Text)"
                            OptionValue="@(i => i.Value)"
                            OptionSelected="@(i => i.Selected)"
                            @bind-SelectedOption="@selectedCustomerId"
                            @bind-Value="@stringCustomer" /> *@
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextArea @bind-Value="model.Description" Rows="3" Cols="80">Keterangan</FluentTextArea>
                            </FluentGridItem>
                        </FluentGrid>
                    </FluentGridItem>
                </FluentGrid>
            </FluentStack>

        </EditForm>
        <br />
        <div>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Color="Color.Neutral" Slot="start" Title="Add Product" OnClick="@(() => Show(true))">
                Add Product
            </FluentButton>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <FluentButton IconStart="@(new Icons.Regular.Size16.Save())" Color="Color.Neutral" Slot="start" Title="Save" OnClick="@(() => Save())">Save</FluentButton>
        </div>
    </div>
}
@if (showProduct == false)
{

    <FluentDataGrid Items="@productLines" ResizableColumns=true GridTemplateColumns="0.4fr 0.6fr 0.3fr  0.3fr  0.3fr"
                    style="height: 250px;overflow:auto;">

        <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Qty)" Title="Qty" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Price)" Title="Price" Align="Align.Start" />
        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" Appearance="Appearance.Filled" BackgroundColor="#ff531a" Color="var(--danger)" Title="Delete" OnClick="@(() => Delete(context.SkuId))" />
        </TemplateColumn>

    </FluentDataGrid>
    <br />

}
else
{
    <FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="@(() => Show(false))" />
    <Stock.Component.NameFilter OnFilter="FilterNames" />

    <FluentDataGrid Items="@productDisplays" ResizableColumns=true GridTemplateColumns="0.4fr 0.3fr 0.2fr  0.2fr 0.2fr 0.2fr 0.3fr"
                    style="height: 580px;overflow:auto;">

        <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.StoreId)" Title="StoreId" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.QtyAvaiable)" Title="Stock" Align="Align.Start" />
        <TemplateColumn Title="Qty">
            <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Qty Placeholder="Qty" Min="1"></FluentNumberField>
        </TemplateColumn>
        <TemplateColumn Title="Price">
            <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Price Placeholder="Price" Min="0"></FluentNumberField>
        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" BackgroundColor="var(--highlight-bg)" Color="var(--error)" Appearance="Appearance.Filled" Title="Add" OnClick="@(() => Add(context.SkuId))" />
        </TemplateColumn>

    </FluentDataGrid>
    <br />




}


@code {
    private bool IsLoading { get; set; } = false;
    private bool showProduct = false;
    public TransactionDto model { get; set; }

    private int LocationId { get; set; }
    IQueryable<ProductDisplayDto>? productDisplays;
    IQueryable<ProductDisplayDto>? productInits;

    List<TransactionLineDto> productSelected = new List<TransactionLineDto>();
    IQueryable<TransactionLineDto>? productLines;

    IQueryable<ContactDto>? contacts;

    List<Option<string>> stringOptionsCustomer = new();
    string? stringCustomer = "(Select Customer)";
    Option<string> selectedCustomerId = default!;
    string stringTransactionType = ((int)TransactionType.Purchase).ToString();
    // List<Option<string>> stringOptionsType = new();

    // Option<string> selectedTypeId = default!;
    // string? stringTypeSelect = "Sale";

    private void FilterNames(string filter)
    {
        productDisplays = productInits.Where(p => p.ProductName.ToLower().Contains(filter.ToLower()));
        StateHasChanged();
    }
    private void HandleOptionChanged(Option<string> value)
    {
        // Handle the selected option changed event
        // You can perform any additional logic here
        try
        {
            selectedCustomerId = value;

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            return;
        }

    }

    private void HandleValueChanged(string value)
    {
        // Handle the selected value changed event
        // You can perform any additional logic here



        try
        {
            stringCustomer = value;

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            return;
        }
    }
   
    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();
            IsLoading = true;


            var loc = _userContext.GetLocationId();
            LocationId = loc.Result;

            productInits = (await _productDisplay.GetProductSalesSelectionAsycn(LocationId)).AsQueryable();
            productDisplays = productInits;
            contacts = (await _contactServices.GetCustomerListAsycn()).AsQueryable();

     
            foreach (var item in contacts)
            {
                stringOptionsCustomer.Add(new Option<string>
                    {
                        Value = item.ContactId.ToString(), // Assuming CategoryId is an integer
                        Text = item.Name,
                        Selected = false // You can set this based on your logic
                    });
            }
            init();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }
    private async void init()
    {
        model = new TransactionDto();

        model.TransactionType = ((int)TransactionType.Sales).ToString();
        model.TransactionDate = DateTime.Today;
        model.Description = "Sales Product";
        model.CreatedBy = "Admin";
        model.CreatedAt = DateTime.Today;

        productSelected = new List<TransactionLineDto>();
    }


    private async void Show(bool flg)
    {
        showProduct = flg;
    }
    private async void Delete(int Id)
    {
        try
        {
            var selectedProduct = productSelected.FirstOrDefault(p => p.SkuId == Id);
            if (selectedProduct != null)
            {
                productSelected.Remove(selectedProduct);
            }
            productLines = productSelected.AsQueryable();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }
    }
    private async void Add(int Id)
    {

        // Find the product with the specified Id in the productDisplays collection
        var selectedProduct = productDisplays.FirstOrDefault(p => p.SkuId == Id);



        if (selectedProduct != null)
        {
            if (productLines != null)
            {
                foreach (var dat in productLines)
                {
                    // Cek apakah data sudah dipilih. Tidak boleh menambahkan data yang sudah ada
                    if (dat.SkuId == selectedProduct.SkuId)
                    {
                        return;
                    }
                }

            }
            // cek untuk penjualan apakah jumlah melebih stock. Untuk pengembalian penjualan tidak perlu di cek

            if (selectedProduct.Qty > selectedProduct.QtyAvaiable || selectedProduct.QtyAvaiable == null)
            {
                _dialogService.ShowInfo("Qty is not available", "Qty Available");
                return;
            }


            // storeId = 1 default.  Seharusnya pada saat login dicari userId itu StoreId nya yang mana ?

            var a = new TransactionLineDto()

                {
                    ProductName = selectedProduct.ProductName,
                    SKU = selectedProduct.SKU,
                    SkuId = selectedProduct.SkuId,
                    StoreId = LocationId,
                    TransactionType = model.TransactionType,
                    Qty = selectedProduct.Qty,
                    Price = selectedProduct.Price

                };
            productSelected.Add(a);


        }

        productLines = productSelected.AsQueryable();


        StateHasChanged();


    }

    private async void Save()
    {


        try
        {

            if (stringCustomer == null)
            {
                _dialogService.ShowInfo("Select Customer", "Save");
                return;
            }
            if (productSelected.Count == 0)
            {
                _dialogService.ShowInfo("Add product", "Select Products");
                return;
            }

            IsLoading = true;
     
            TransactionDto a = new TransactionDto()
                {
                    TransactionDate = model.TransactionDate,
                    TransactionType = model.TransactionType,
                    ContactId = Convert.ToInt32(selectedCustomerId.Value),
                    CreatedAt = model.CreatedAt,
                    CreatedBy = model.CreatedBy,
                    IsPosted = true,
                    Description = model.Description
                };

            ServiceResponseDTO<bool> result = new();
            result = await _transactionServices.CreateAsync(a, productLines);

            IsLoading = false;
            // berikan pesan

            if (result.Success == true)
            {
                _dialogService.ShowInfo(result.Message, "Save");
            }
            else
            {
                _dialogService.ShowWarning(result.Message, "Save");
            }

            // remove product selected from user interface
            productLines = null;
            result = new();
            init();
            productInits = (await _productDisplay.GetProductSalesSelectionAsycn(LocationId)).AsQueryable();
            productDisplays = productInits;

            StateHasChanged();

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }
    }

}

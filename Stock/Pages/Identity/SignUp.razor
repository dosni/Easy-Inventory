@page "/register"






@*
@attribute [Authorize(Policy = "Admin")]

 *@

@if (IsLoading)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>

}
<div style="padding: 1.5rem;">
    <FluentLabel Typo="Typography.Header"> Signup User </FluentLabel>
    <br />
    <EditForm Model="@user" OnValidSubmit="@HandleRegistration">
        <DataAnnotationsValidator />
        <FluentValidationSummary />


        <FluentStack Orientation="Orientation.Vertical">
            <FluentGrid Spacing="0">
                <FluentGridItem xs="12">
                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentTextField Appearance="FluentInputAppearance.Outline" @bind-Value="user.UserName"  >User Name</FluentTextField>
                        </FluentGridItem>
                    </FluentGrid>
                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentTextField @bind-Value="user.Password" TextFieldType="TextFieldType.Password">Password</FluentTextField>
                        </FluentGridItem>
                    </FluentGrid>

                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentTextField @bind-Value="user.ConfirmPassword" TextFieldType="TextFieldType.Password">Confirm Password</FluentTextField>
                        </FluentGridItem>
                    </FluentGrid>

                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentCombobox Items=@stringOptionsRole
                                            OptionText="@(i => i.Text)"
                                            OptionValue="@(i => i.Value)"
                                            OptionSelected="@(i => i.Selected)"
                            @bind-SelectedOption="@selectedRoleId"
                            @bind-Value="@stringRole" />

                        </FluentGridItem>
                    </FluentGrid>
                    <FluentGrid>
                        <FluentGridItem xs="6">
                            <FluentCombobox Items=@stringOptionsStore
                                            OptionText="@(i => i.Text)"
                                            OptionValue="@(i => i.Value)"
                                            OptionSelected="@(i => i.Selected)"
                            @bind-SelectedOption="@selectedStoreId"
                            @bind-Value="@stringStore" />
                        </FluentGridItem>
                    </FluentGrid>
                </FluentGridItem>
            </FluentGrid>

            <br />
        </FluentStack>
        <br />
        <FluentGrid Spacing="3" Justify="JustifyContent.FlexStart">
            <FluentGridItem xs="12" sm="6">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
            </FluentGridItem>

        </FluentGrid>

    </EditForm>
</div>



@code {

    private bool IsLoading { get; set; }
    // string? selectValue = "User";
    string? stringUser;

    List<Option<string>> stringOptionsStore = new();
    Option<string> selectedStoreId = default!;
    string stringStoreSelect = "default";


    List<Option<string>> stringOptionsRole = new();
    Option<string> selectedRoleId = default!;
    string stringRoleSelect = "default";

    SignUpRequestDTO user = new SignUpRequestDTO();

    IQueryable<StoreDto>? stores;

    //show / hide password

    bool isShow;
   

    ServiceResponseDTO<string> result { get; set; }

    string? stringStore
    {
        get
        {
            return stringStoreSelect;
        }
        set
        {
            stringStoreSelect = value;
        }
    }

    string? stringRole
    {
        get
        {
            return stringRoleSelect;
        }
        set
        {
            stringRoleSelect = value;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        stores = (await _storeServices.GetStoreListAsycn()).AsQueryable();


        init();
        IsLoading = false;

    }
    private async void init()
    {
        user = new SignUpRequestDTO();
        user.Role = "User";

        stringOptionsRole = new()
            {
                { new Option<string> { Value = "User", Text = "User", Selected=true } },
                { new Option<string> { Value = "CS", Text = "CS" } },
                { new Option<string> { Value = "Admin", Text = "Admin" } }
            };

        stringOptionsStore.Add(new Option<string>
            {
                Value = "0",
                Text = "(Select Location)",
                Selected = true // You can set this based on your logic
            });

        foreach (var item in stores)
        {
            stringOptionsStore.Add(new Option<string>
                {
                    Value = item.StoreId.ToString(), // Assuming CategoryId is an integer
                    Text = item.StoreName,
                    Selected = false // You can set this based on your logic
                });
        }
    }
    async Task HandleRegistration()
    {
        if (stringStore == "(Select Location)")
        {
            _dialogService.ShowInfo("Select Location", "Save");
            return;
        }

        IsLoading = true;
        // user boleh membuat user tanpa email dan password

        user.StoreId = Convert.ToInt32(selectedStoreId.Value);
        user.Role = selectedRoleId.Value;

        result = new();
        result = await _userServices.RegisterUser(user);


        if (result.Success)
        {
       
            _dialogService.ShowInfo(result.Message, "Save");
        }
        else
        {

            _dialogService.ShowWarning(result.Message, "Save");
        }
        result = new();
        init();
        StateHasChanged();

        IsLoading = false;
    }
}


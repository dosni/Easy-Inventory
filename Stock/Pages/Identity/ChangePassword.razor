@page "/ChangePassword"




@if (IsLoading)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>

}

<div style="padding: 1.5rem;">
    <FluentLabel Typo="Typography.Header"> Change Password </FluentLabel>
    <br/>
    <EditForm Model="@request" OnValidSubmit="@Change">
        <DataAnnotationsValidator />
        <FluentValidationSummary />

        <FluentStack Orientation="Orientation.Vertical">
            <FluentTextField @bind-Value="request.OldPassword" TextFieldType="TextFieldType.Password"
                             style="width: 40%;">Old Password</FluentTextField>
            <FluentTextField @bind-Value="request.NewPassword" TextFieldType="TextFieldType.Password"
                             style="width: 40%;">New Password</FluentTextField>
            <FluentTextField @bind-Value="request.ConfirmPassword" TextFieldType="TextFieldType.Password"
                             style="width: 40%;">Confirm Password</FluentTextField>

        </FluentStack>
        <br />
        <FluentGrid Spacing="3" Justify="@Justification">
            <FluentGridItem xs="12" sm="6">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
            </FluentGridItem>

        </FluentGrid>
    </EditForm>

</div>


@code {

    private bool IsLoading { get; set; }
    private ChangePasswordDTO request = new();
    string message = string.Empty;

    JustifyContent Justification = JustifyContent.FlexStart;

    // private string errorMessage = string.Empty;

    // public IEnumerable<string> Errors { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;
    public string? CustomerID { get; set; }

    // private EditContext _editContext;
    ServiceResponseDTO<string> result { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        // _editContext = new EditContext(request);

        authState = await _authState;
        foreach (var claim in authState.User.Claims)
        {
            CustomerID = claim.Value;

            break;

        }
    }

   

    private async Task Change()
    {
        string subTitle = string.Empty;
        string message = string.Empty;

        IsLoading = true;

        try
        {
            var user = await _userManager.FindByIdAsync(CustomerID);
            if (user == null)
            {
                message = "Pergantian password gagal.";
                _toast.ShowToast(ToastIntent.Error, message);
               
            }


            result = await _userServices.ChangePassword(user, request);

            if (!result.Success)
            {
                message = "Pergantian password gagal.";
                _toast.ShowToast(ToastIntent.Error, message);
          
            }

            message = "Pergantian password berhasil.";
            _toast.ShowToast(ToastIntent.Success, message);
            request = new();

            IsLoading = false;

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            return;
        }

      

    }   
}

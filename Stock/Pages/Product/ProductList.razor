@page "/productList"
@using ServiceLayer.ProductService;
@using ServiceLayer.ProductService.Concrete;

<PageTitle>ProductList</PageTitle>

@inject ProductServices _productServices


@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
@if (products != null)
{
    <FluentDataGrid Items="@products" ResizableColumns=true GridTemplateColumns="0.4fr 0.6fr 0.3fr 0.3fr"
                    style="height: 250px;overflow:auto;">

        <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Category)" Title="Category" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.ProductDescription)" Title="Keterangan" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" />
      @*   <TemplateColumn Title="Edit">
            <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Edit(context.CategoryId,context.Category))">Edit</FluentButton>
        </TemplateColumn>
        <TemplateColumn Title="Delete">
            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Delete())" @onclick="@(() => Delete(context.CategoryId,context.Category))">Delete</FluentButton>
        </TemplateColumn> *@
    </FluentDataGrid>
}

@code {
    private bool IsLoading { get; set; } = false;
    IQueryable<ProductDto>? products;

    JustifyContent Justification = JustifyContent.FlexStart;
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        IsLoading = true;
        await Task.Delay(200);

        products = (await _productServices.GetProductListAsycn()).AsQueryable();


        IsLoading = false;
    }
}

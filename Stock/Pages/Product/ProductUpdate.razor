@page "/productUpdate/{Id:int}"

@using ServiceLayer.Model;
@using ServiceLayer.ProductCategoryServices;
@using ServiceLayer.ProductCategoryServices.Concrete;
@using ServiceLayer.ProductService;
@using ServiceLayer.ProductService.Concrete;
@using ServiceLayer.ProductUnitServices.Concrete;
@using ServiceLayer.ProductUnitServices;

<PageTitle>ProductUpdate</PageTitle>

@inject ProductServices _productServices
@inject CategoryServices _categoryServices
@inject UnitServices _unitServices



@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}

<FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="GoBack" />


@if (cats != null && units != null)
{

    <div style="padding: 1.5rem;">
        <FluentLabel Typo="Typography.Header"> Update Product </FluentLabel>
        <br />
        <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentGrid Spacing="0">
                    <FluentGridItem xs="6">
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value="model.ProductName" Readonly=false Placeholder="Product Name"></FluentTextField>
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value="model.SKU" Placeholder="SKU"></FluentTextField>
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=model.Price Placeholder="Price" Min="0"></FluentNumberField>
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentCombobox Items=@stringOptionsCat
                                                OptionText="@(i => i.Text)"
                                                OptionValue="@(i => i.Value)"
                                                OptionSelected="@(i => i.Selected)"
                                @bind-SelectedOption="@selectedCategoryId"
                                @bind-Value="@stringCategory" />
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentCombobox Items=@stringOptionsUnit
                                                OptionText="@(i => i.Text)"
                                                OptionValue="@(i => i.Value)"
                                                OptionSelected="@(i => i.Selected)"
                                @bind-SelectedOption="@selectedUnitId"
                                @bind-Value="@stringUnit" />
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextArea @bind-Value="model.ProductDescription" Rows="6" Cols="40">Keterangan</FluentTextArea>

                            </FluentGridItem>
                        </FluentGrid>
                    </FluentGridItem>
                </FluentGrid>
            </FluentStack>
            <br />
            <FluentGrid Spacing="3" Justify="@Justification">
                <FluentGridItem xs="12" sm="6">
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
                </FluentGridItem>

            </FluentGrid>
        </EditForm>

    </div>
}





@code {
    [Parameter]
    public int Id { get; set; }
    private bool IsLoading { get; set; } = false;

    List<Option<string>> stringOptionsCat = new();
    string? stringCategory = "(Select Category)";

    List<Option<string>> stringOptionsUnit = new();
    string? stringUnit = "(Select Unit)";

    Option<string> selectedCategoryId = default!;

    Option<string> selectedUnitId = default!;


    IQueryable<CategoryDto>? cats;
    IQueryable<UnitDto>? units;

    JustifyContent Justification = JustifyContent.FlexStart;

    public ProductDto? model { get; set; } = new();
  

   // IQueryable<ProductDto>? products;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();

            IsLoading = true;
            model = _productServices.GetProduct(Id);


           
            units = (await _unitServices.GetUnitListAsycn()).AsQueryable();
            cats = (await _categoryServices.GetEFCategoryListAsycn()).AsQueryable();

            init();

     
       
            IsLoading = false;
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }

    private async void init()
    {

        foreach (var item in cats)
        {
            stringOptionsCat.Add(new Option<string>
                {
                    Value = item.CategoryId.ToString(), // Assuming CategoryId is an integer
                    Text = item.Category,
                    Selected = (item.CategoryId == model.CategoryId)
                });
        }

        foreach (var item in units)
        {
            stringOptionsUnit.Add(new Option<string>
                {
                    Value = item.UnitId.ToString(), // Assuming CategoryId is an integer
                    Text = item.Unit,
                    Selected = (item.UnitId == model.UnitId) // You can set this based on your logic
                });
        }
    }

    private async Task GoBack()
    {
        await jsruntime.InvokeVoidAsync("history.back");
    }

    private async void OnValidSubmit()
    {
        if (stringCategory == "(Select Category)" )
        {
            _dialogService.ShowInfo("Pilih Category", "Save");
            return;
        }

        if (stringUnit == "(Select Unit)" )
        {
            _dialogService.ShowInfo("Pilih Unit", "Save");
            return;
        }

        try
        {
            IsLoading = true;
     
            ProductDto a = new ProductDto()
                {
                    ProductId = Id,
                    ProductName = model.ProductName,
                    ProductDescription = model.ProductDescription,
                    SKU = model.SKU,
                    SkuId = model.SkuId,
                    CategoryId = Convert.ToInt32(selectedCategoryId?.Value),//await _categoryServices.GetCategoryId(model.Category),
                    UnitId = Convert.ToInt32(selectedUnitId?.Value),//await _unitServices.GetUnitId(model.Unit),
                    Price = model.Price,
                    Category = model.Category
                };

            ServiceResponseDTO<bool> result = new();

            result = await _productServices.UpdateAsync(a);

            IsLoading = false;

            if (result.Success == true)
            {
                _dialogService.ShowInfo(result.Message, "Save");
            }
            else
            {
                _dialogService.ShowWarning(result.Message, "Save");
            }

            result = new();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }


    }
}

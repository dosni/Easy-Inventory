@page "/contactUpdate/{Id:int}"
@using ServiceLayer.ContactServices.Concrete;
@using ServiceLayer.ContactServices;
@using ServiceLayer.Model;

<PageTitle>ContactUpdate</PageTitle>

@inject ContactServices _contactServices
@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}

<FluentIcon Value="@(new Icons.Regular.Size16.ArrowLeft())" Color="Color.Neutral" Slot="start" OnClick="GoBack" />
@if (model != null)
{

    <div style="padding: 1.5rem;">

        <FluentLabel Typo="Typography.Header"> Update Contact </FluentLabel>
        <br />
        <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentGrid Spacing="0">
                    <FluentGridItem xs="12">
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value="model.Name" Placeholder="Name" />
                            </FluentGridItem>

                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentCombobox Items=@stringOptionsType
                                                OptionText="@(i => i.Text)"
                                                OptionValue="@(i => i.Value)"
                                                OptionSelected="@(i => i.Selected)"
                                @bind-SelectedOption="@selectedTypeId"
                                @bind-Value="@stringType" />
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value="model.Phone" Placeholder="Phone" />
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextArea @bind-Value="model.Address" Rows="3" Cols="80">Alamat</FluentTextArea>
                            </FluentGridItem>
                        </FluentGrid>
                        <FluentGrid>
                            <FluentGridItem xs="6">
                                <FluentTextArea @bind-Value="model.Description" Rows="3" Cols="80">Description</FluentTextArea>
                            </FluentGridItem>
                        </FluentGrid>
                    </FluentGridItem>
                </FluentGrid>
            </FluentStack>
            <br />
            <FluentGrid Spacing="3" Justify="@Justification">
                <FluentGridItem xs="12" sm="6">
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
                </FluentGridItem>

            </FluentGrid>
        </EditForm>

    </div>
}



@code {
    [Parameter]
    public int Id { get; set; }
    private bool IsLoading { get; set; } = false;

    List<Option<string>> stringOptionsType = new();
    string? stringType = "(Select Type)";
    Option<string> selectedTypeId = default!;
    JustifyContent Justification = JustifyContent.FlexStart;

    public ContactDto? model { get; set; } = new();



    private async Task GoBack()
    {
        await jsruntime.InvokeVoidAsync("history.back");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();

            IsLoading = true;
            model = _contactServices.GetContact(Id);
            init();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }

    private async void init()
    {

        stringOptionsType = new()
        {
            { new Option<string> { Value = "0", Text = "(Select Type)", Selected = (model.type=="0") } },
            { new Option<string> { Value = "S", Text = "Supplier", Selected = (model.type=="S") } },
            { new Option<string> { Value = "C", Text = "Customer", Selected = (model.type=="C")} },
            { new Option<string> { Value = "O", Text = "Other", Selected = (model.type=="O") } }

        };

    }

    private async void OnValidSubmit()
    {
        if (stringType == "(Select Type)" )
        {
            _dialogService.ShowInfo("Select Type", "Save");
            return;
        }
        try
        {
            IsLoading = true;

            model.type = selectedTypeId.Value;

            ContactDto a = new ContactDto()
                {
                    ContactId = Id,
                    Name = model.Name,
                    type = model.type,
                    Address = model.Address,
                    Phone = model.Phone,
                    Description = model.Description
                };

            ServiceResponseDTO<bool> result = new();

            result = await _contactServices.UpdateAsync(a);

            IsLoading = false;
            // berikan pesan

            if (result.Success == true)
            {
                _dialogService.ShowInfo(result.Message, "Update");
            }
            else
            {
                _dialogService.ShowWarning(result.Message, "Update");
            }

            result = new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }

    }

}

@page "/filteringComponent"

<PageTitle>Filtering</PageTitle>


@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}

<Stock.Pages.Component.NameFilter OnFilter="FilterProducts" />

"
@if (productDisplays != null)
{
    <div>



        <FluentDataGrid Items="@productDisplays" ResizableColumns=true GridTemplateColumns="0.4fr 0.4fr 0.2fr 0.2fr 0.3fr"
                        style="height: 580px;overflow:auto;">

            <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" Sortable="true" />
            <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" Sortable="true" />
            <TemplateColumn Title="Qty">
                <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Qty Placeholder="Qty" Min="1"></FluentNumberField>
            </TemplateColumn>
            <TemplateColumn Title="Price">
                <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Price Placeholder="Price" Min="0"></FluentNumberField>
            </TemplateColumn>


        </FluentDataGrid>

    </div>

}
@code {

    private bool IsLoading { get; set; } = false;
    // string filter = string.Empty;


    JustifyContent Justification = JustifyContent.FlexStart;
    IQueryable<ProductDisplayDto>? productDisplays;
    IQueryable<ProductDisplayDto>? productInits;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();
            IsLoading = true;

            productInits = (await _productDisplay.GetProducPurchasetSelectionAsycn()).AsQueryable();
            productDisplays = productInits;
            IsLoading = false;


        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }

    }

    

    private void FilterProducts(string filter)
    {
        productDisplays = productInits.Where(p => p.ProductName.ToLower().Contains(filter.ToLower()));
        StateHasChanged();
    }
}

@page "/filtering"

<PageTitle>Filtering</PageTitle>

@message

@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
@if (productDisplays != null)
{
     <div >

        <FluentGridItem xs="6">
            <FluentGrid>
                <FluentGridItem xs="3">
                    <FluentTextField Appearance="FluentInputAppearance.Outline" style="width: 100%;" @bind-Value="@filter"  >Filter</FluentTextField>
                </FluentGridItem>

            </FluentGrid>
        </FluentGridItem>
        <br />
        <FluentGrid Spacing="3" Justify="@Justification">
            <FluentGridItem xs="12" sm="6">
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="Filter">Submit</FluentButton>
            </FluentGridItem>

        </FluentGrid>
        <br />

        <FluentDataGrid Items="@productDisplays" ResizableColumns=true GridTemplateColumns="0.4fr 0.4fr 0.2fr 0.2fr 0.3fr"
                        style="height: 580px;overflow:auto;">

            <PropertyColumn Property="@(c => c.ProductName)" Title="Product Name" Align="Align.Start" Sortable="true" />
            <PropertyColumn Property="@(c => c.SKU)" Title="SKU" Align="Align.Start" Sortable="true" />
            <TemplateColumn Title="Qty">
                <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Qty Placeholder="Qty" Min="1"></FluentNumberField>
            </TemplateColumn>
            <TemplateColumn Title="Price">
                <FluentNumberField Appearance="FluentInputAppearance.Filled" style="width: 100%;" @bind-Value=context.Price Placeholder="Price" Min="0"></FluentNumberField>
            </TemplateColumn>
        

        </FluentDataGrid>

     </div>
   
}


@code {
    private bool IsLoading { get; set; } = false;
    string filter = string.Empty;
    string message = string.Empty;

    JustifyContent Justification = JustifyContent.FlexStart;
    IQueryable<ProductDisplayDto>? productDisplays;
  

    protected override async Task OnInitializedAsync()
    {
        try
        {
            base.OnInitialized();
            IsLoading = true;

            productDisplays = (await _productDisplay.GetProducPurchasetSelectionAsycn()).AsQueryable();
            IsLoading = false;


        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }

    }

    private async void Filter()
    {
        message = filter;
        productDisplays = productDisplays.Where(p => p.ProductName.ToLower().Contains(filter.ToLower()));
        StateHasChanged();

    }
}
